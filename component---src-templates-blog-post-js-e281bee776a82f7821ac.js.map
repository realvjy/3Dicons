{"version":3,"file":"component---src-templates-blog-post-js-e281bee776a82f7821ac.js","mappings":"2IAgDA,IArCY,WAAO,IAADA,EAAAC,EACVC,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAA+B,QAAzBJ,EAAGE,EAAKG,KAAKC,oBAAY,IAAAN,OAAA,EAAtBA,EAAwBI,OACjCG,EAA+B,QAAzBN,EAAGC,EAAKG,KAAKC,oBAAY,IAAAL,OAAA,EAAtBA,EAAwBM,OAEvC,OACEC,EAAAA,cAAA,OAAKC,UAAU,OACbD,EAAAA,cAACE,EAAAA,EAAW,CAAAC,QAAA,2VACXP,aAAM,EAANA,EAAQQ,OACPJ,EAAAA,cAAA,SAAG,MACEA,EAAAA,cAAA,cAASJ,EAAOQ,MAAc,KAAER,aAAM,EAANA,EAAQS,UAAW,KAAI,IAE1DL,EAAAA,cAAA,KAAGM,KAAI,yBAAyBP,aAAM,EAANA,EAAQQ,UAAO,KAAU,2BAOnE,C,oFCoBA,UA3DyB,SAAHC,GAA4B,IAADhB,EAArBE,EAAIc,EAAJd,KAAMe,EAAQD,EAARC,SAC1BC,EAAOhB,EAAKiB,eACZC,GAAkC,QAAtBpB,EAAAE,EAAKG,KAAKC,oBAAY,IAAAN,OAAA,EAAtBA,EAAwBqB,QAAK,QACvCC,EAAmBpB,EAAnBoB,SAAUC,EAASrB,EAATqB,KAElB,OACEf,EAAAA,cAACgB,EAAAA,EAAM,CAACP,SAAUA,EAAUI,MAAOD,GACjCZ,EAAAA,cAACiB,EAAAA,EAAG,CACFJ,MAAOH,EAAKQ,YAAYL,MACxBM,YAAaT,EAAKQ,YAAYC,aAAeT,EAAKU,UAEpDpB,EAAAA,cAAA,WACEC,UAAU,YACVoB,WAAS,EACTC,SAAS,6BAETtB,EAAAA,cAAA,cACEA,EAAAA,cAAA,MAAIuB,SAAS,YAAYb,EAAKQ,YAAYL,OAC1Cb,EAAAA,cAAA,SAAIU,EAAKQ,YAAYM,OAEvBxB,EAAAA,cAAA,WACEyB,wBAAyB,CAAEC,OAAQhB,EAAKiB,MACxCJ,SAAS,gBAEXvB,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAAC4B,EAAAA,EAAG,QAGR5B,EAAAA,cAAA,OAAKC,UAAU,iBACbD,EAAAA,cAAA,MACE6B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGXlC,EAAAA,cAAA,UACGc,GACCd,EAAAA,cAACmC,EAAAA,KAAI,CAACC,GAAItB,EAASuB,OAAOC,KAAMC,IAAI,QAAO,KACtCzB,EAASI,YAAYL,QAI9Bb,EAAAA,cAAA,UACGe,GACCf,EAAAA,cAACmC,EAAAA,KAAI,CAACC,GAAIrB,EAAKsB,OAAOC,KAAMC,IAAI,QAC7BxB,EAAKG,YAAYL,MAAM,SAQxC,C","sources":["webpack://3dicons/./src/components/bio.js","webpack://3dicons/./src/templates/blog-post.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage/>\n      {author?.name && (\n        <p>\n          by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["_data$site$siteMetada","_data$site$siteMetada2","data","useStaticQuery","author","site","siteMetadata","social","React","className","StaticImage","__error","name","summary","href","twitter","_ref","location","post","markdownRemark","siteTitle","title","previous","next","Layout","Seo","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","Bio","style","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}